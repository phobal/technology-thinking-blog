{"data":{"markdownRemark":null},"pageContext":{"slug":"","prev":{"excerpt":"生命周期方法 组件的生命周期主要包括以下几种情况 组件被实例化的时候 组件属性改变的时候 组件状态被改变的时候 组件被销毁的时候 componentWillMount 条件：第一次渲染阶段在调用 render 方法前会被调用\n作用：该方法在整个组件生命周期只会被调用一次，所以可以利用该方法做一些组件内部的初始化工作 componentDidMount 条件：第一次渲染成功过后，组件对应的 DOM 已经添加到页面后调用\n作用：这个阶段表示组件对应的 DOM…","html":"<h2 id=\"生命周期方法\"><a href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生命周期方法</h2>\n<p>组件的生命周期主要包括以下几种情况</p>\n<ul>\n<li>\n<p>组件被实例化的时候</p>\n</li>\n<li>\n<p>组件属性改变的时候</p>\n</li>\n<li>\n<p>组件状态被改变的时候</p>\n</li>\n<li>\n<p>组件被销毁的时候</p>\n</li>\n<li>\n<p>componentWillMount</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件：第一次渲染阶段在调用 render 方法前会被调用\n作用：该方法在整个组件生命周期只会被调用一次，所以可以利用该方法做一些组件内部的初始化工作</p>\n<ol start=\"2\">\n<li>componentDidMount</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件：第一次渲染成功过后，组件对应的 DOM 已经添加到页面后调用\n作用：这个阶段表示组件对应的 DOM 已经存在，我们可以在这个时候做一些依赖 DOM 的操作或者其他的一些如请求数据，和第三方库整合的操作。如果嵌套了子组件，子组件会比父组件优先渲染，所以这个时候可以获取子组件对应的 DOM。</p>\n<ol start=\"3\">\n<li>componentWillReceiveProps(newProps)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span>\n  object nextProps\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件： 当组件获取新属性的时候，第一次渲染不会调用\n用处： 这个时候可以根据新的属性来修改组件状态</p>\n<p>eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">componentWillReceiveProps<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    likesIncreasing<span class=\"token punctuation\">:</span> nextProps<span class=\"token punctuation\">.</span>likeCount <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>likeCount\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意： 这个时候虽说是获取新属性，但并不能确定属性一定改变了，例如一个组件被多次渲染到 DOM 中，如下面：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  componentWillReceiveProps<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'componentWillReceiveProps'</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mydata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'drinks'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mydata<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mydata<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mydata<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>结果会输出两次 componentWillReceiveProps，虽然属性数据没有改变，但是仍然会调用 componentWillReceiveProps 方法。</p>\n<ol start=\"4\">\n<li>shouldComponentUpdate(nextProps, nextState)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">boolean <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>\n  object nextProps<span class=\"token punctuation\">,</span> object nextState\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件： 接收到新属性或者新状态的时候在 render 前会被调用（除了调用 forceUpdate 和初始化渲染以外）\n用处： 该方法让我们有机会决定是否重渲染组件，如果返回 false，那么不会重渲染组件，借此可以优化应用性能（在组件很多的情况）。</p>\n<ol start=\"5\">\n<li>componentWillUpdate</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>\n  object nextProps<span class=\"token punctuation\">,</span> object nextState\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件：当组件确定要更新，在 render 之前调用\n用处：这个时候可以确定一定会更新组件，可以执行更新前的操作\n注意：方法中不能使用 setState ，setState 的操作应该在 componentWillReceiveProps 方法中调用</p>\n<ol start=\"6\">\n<li>componentDidUpdate</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span>\n  object nextProps<span class=\"token punctuation\">,</span> object nextState\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件：当组件确定要更新，在 render 之前调用\n用处：这个时候可以确定一定会更新组件，可以执行更新前的操作\n注意：方法中不能使用 setState ，setState 的操作应该在 componentWillReceiveProps 方法中调用</p>\n<ol start=\"7\">\n<li>componentDidUpdate</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">void</span> <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>\n  object prevProps<span class=\"token punctuation\">,</span> object prevState\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>条件：更新被应用到 DOM 之后\n用处：可以执行组件更新过后的操作</p>\n<ul>\n<li>以上生命周期存在于 v15.3</li>\n</ul>","id":"01532b5c-8bed-527d-9018-7894eed0fa84","fields":{"slug":"react-生命周期"},"frontmatter":{"date":"2016-02-11","title":"React 生命周期","category":"Tech","tags":["react"],"banner":""},"timeToRead":2},"next":null}}